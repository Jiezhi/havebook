package io.github.jiezhi.havebook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import io.github.jiezhi.havebook.dao.DoubanBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOUBAN_BOOK".
*/
public class DoubanBookDao extends AbstractDao<DoubanBook, Void> {

    public static final String TABLENAME = "DOUBAN_BOOK";

    /**
     * Properties of entity DoubanBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Alt = new Property(0, String.class, "alt", false, "ALT");
        public final static Property Alt_title = new Property(1, String.class, "alt_title", false, "ALT_TITLE");
        public final static Property Authors = new Property(2, String.class, "authors", false, "AUTHORS");
        public final static Property Author_intro = new Property(3, String.class, "author_intro", false, "AUTHOR_INTRO");
        public final static Property Binding = new Property(4, String.class, "binding", false, "BINDING");
        public final static Property Catalog = new Property(5, String.class, "catalog", false, "CATALOG");
        public final static Property Id = new Property(6, String.class, "id", false, "ID");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Img_large = new Property(8, String.class, "img_large", false, "IMG_LARGE");
        public final static Property Img_medium = new Property(9, String.class, "img_medium", false, "IMG_MEDIUM");
        public final static Property Img_small = new Property(10, String.class, "img_small", false, "IMG_SMALL");
        public final static Property Isbn10 = new Property(11, String.class, "isbn10", false, "ISBN10");
        public final static Property Isbn13 = new Property(12, String.class, "isbn13", false, "ISBN13");
        public final static Property Origin_title = new Property(13, String.class, "origin_title", false, "ORIGIN_TITLE");
        public final static Property Pages = new Property(14, String.class, "pages", false, "PAGES");
        public final static Property Price = new Property(15, String.class, "price", false, "PRICE");
        public final static Property Pubdate = new Property(16, String.class, "pubdate", false, "PUBDATE");
        public final static Property Publisher = new Property(17, String.class, "publisher", false, "PUBLISHER");
        public final static Property RatingAverage = new Property(18, String.class, "ratingAverage", false, "RATING_AVERAGE");
        public final static Property RatingMax = new Property(19, String.class, "ratingMax", false, "RATING_MAX");
        public final static Property RatingMin = new Property(20, String.class, "ratingMin", false, "RATING_MIN");
        public final static Property RatingNum = new Property(21, Integer.class, "ratingNum", false, "RATING_NUM");
        public final static Property Subtitle = new Property(22, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Summary = new Property(23, String.class, "summary", false, "SUMMARY");
        public final static Property Title = new Property(24, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(25, String.class, "url", false, "URL");
        public final static Property Translator = new Property(26, String.class, "translator", false, "TRANSLATOR");
        public final static Property Tags = new Property(27, String.class, "tags", false, "TAGS");
    };


    public DoubanBookDao(DaoConfig config) {
        super(config);
    }
    
    public DoubanBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOUBAN_BOOK\" (" + //
                "\"ALT\" TEXT," + // 0: alt
                "\"ALT_TITLE\" TEXT," + // 1: alt_title
                "\"AUTHORS\" TEXT," + // 2: authors
                "\"AUTHOR_INTRO\" TEXT," + // 3: author_intro
                "\"BINDING\" TEXT," + // 4: binding
                "\"CATALOG\" TEXT," + // 5: catalog
                "\"ID\" TEXT NOT NULL ," + // 6: id
                "\"IMAGE\" TEXT," + // 7: image
                "\"IMG_LARGE\" TEXT," + // 8: img_large
                "\"IMG_MEDIUM\" TEXT," + // 9: img_medium
                "\"IMG_SMALL\" TEXT," + // 10: img_small
                "\"ISBN10\" TEXT," + // 11: isbn10
                "\"ISBN13\" TEXT," + // 12: isbn13
                "\"ORIGIN_TITLE\" TEXT," + // 13: origin_title
                "\"PAGES\" TEXT," + // 14: pages
                "\"PRICE\" TEXT," + // 15: price
                "\"PUBDATE\" TEXT," + // 16: pubdate
                "\"PUBLISHER\" TEXT," + // 17: publisher
                "\"RATING_AVERAGE\" TEXT," + // 18: ratingAverage
                "\"RATING_MAX\" TEXT," + // 19: ratingMax
                "\"RATING_MIN\" TEXT," + // 20: ratingMin
                "\"RATING_NUM\" INTEGER," + // 21: ratingNum
                "\"SUBTITLE\" TEXT," + // 22: subtitle
                "\"SUMMARY\" TEXT," + // 23: summary
                "\"TITLE\" TEXT," + // 24: title
                "\"URL\" TEXT," + // 25: url
                "\"TRANSLATOR\" TEXT," + // 26: translator
                "\"TAGS\" TEXT);"); // 27: tags
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOUBAN_BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DoubanBook entity) {
        stmt.clearBindings();
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(1, alt);
        }
 
        String alt_title = entity.getAlt_title();
        if (alt_title != null) {
            stmt.bindString(2, alt_title);
        }
 
        String authors = entity.getAuthors();
        if (authors != null) {
            stmt.bindString(3, authors);
        }
 
        String author_intro = entity.getAuthor_intro();
        if (author_intro != null) {
            stmt.bindString(4, author_intro);
        }
 
        String binding = entity.getBinding();
        if (binding != null) {
            stmt.bindString(5, binding);
        }
 
        String catalog = entity.getCatalog();
        if (catalog != null) {
            stmt.bindString(6, catalog);
        }
        stmt.bindString(7, entity.getId());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String img_large = entity.getImg_large();
        if (img_large != null) {
            stmt.bindString(9, img_large);
        }
 
        String img_medium = entity.getImg_medium();
        if (img_medium != null) {
            stmt.bindString(10, img_medium);
        }
 
        String img_small = entity.getImg_small();
        if (img_small != null) {
            stmt.bindString(11, img_small);
        }
 
        String isbn10 = entity.getIsbn10();
        if (isbn10 != null) {
            stmt.bindString(12, isbn10);
        }
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(13, isbn13);
        }
 
        String origin_title = entity.getOrigin_title();
        if (origin_title != null) {
            stmt.bindString(14, origin_title);
        }
 
        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(15, pages);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(16, price);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(17, pubdate);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(18, publisher);
        }
 
        String ratingAverage = entity.getRatingAverage();
        if (ratingAverage != null) {
            stmt.bindString(19, ratingAverage);
        }
 
        String ratingMax = entity.getRatingMax();
        if (ratingMax != null) {
            stmt.bindString(20, ratingMax);
        }
 
        String ratingMin = entity.getRatingMin();
        if (ratingMin != null) {
            stmt.bindString(21, ratingMin);
        }
 
        Integer ratingNum = entity.getRatingNum();
        if (ratingNum != null) {
            stmt.bindLong(22, ratingNum);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(23, subtitle);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(24, summary);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(25, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(26, url);
        }
 
        String translator = entity.getTranslator();
        if (translator != null) {
            stmt.bindString(27, translator);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(28, tags);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DoubanBook readEntity(Cursor cursor, int offset) {
        DoubanBook entity = new DoubanBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // alt
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alt_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authors
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author_intro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // binding
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // catalog
            cursor.getString(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // img_large
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // img_medium
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // img_small
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isbn10
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isbn13
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // origin_title
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pages
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // price
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // pubdate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // publisher
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ratingAverage
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ratingMax
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // ratingMin
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // ratingNum
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // subtitle
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // summary
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // title
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // url
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // translator
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // tags
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DoubanBook entity, int offset) {
        entity.setAlt(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAlt_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthors(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor_intro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBinding(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCatalog(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImg_large(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImg_medium(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImg_small(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsbn10(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsbn13(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOrigin_title(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPages(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPrice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPubdate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPublisher(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRatingAverage(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRatingMax(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRatingMin(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRatingNum(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setSubtitle(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSummary(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTitle(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTranslator(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTags(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DoubanBook entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DoubanBook entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
