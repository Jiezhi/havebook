package io.github.jiezhi.havebook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import io.github.jiezhi.havebook.dao.MyBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_BOOK".
*/
public class MyBookDao extends AbstractDao<MyBook, Long> {

    public static final String TABLENAME = "MY_BOOK";

    /**
     * Properties of entity MyBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DoubanId = new Property(1, String.class, "doubanId", false, "DOUBAN_ID");
        public final static Property Isbn13 = new Property(2, String.class, "isbn13", false, "ISBN13");
        public final static Property Img_local = new Property(3, String.class, "img_local", false, "IMG_LOCAL");
        public final static Property CollectDate = new Property(4, java.util.Date.class, "collectDate", false, "COLLECT_DATE");
        public final static Property ModifyDate = new Property(5, java.util.Date.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property MyComment = new Property(7, String.class, "myComment", false, "MY_COMMENT");
        public final static Property MyTag = new Property(8, String.class, "myTag", false, "MY_TAG");
        public final static Property MyRating = new Property(9, String.class, "myRating", false, "MY_RATING");
        public final static Property Pages = new Property(10, Integer.class, "pages", false, "PAGES");
        public final static Property ReadingPages = new Property(11, Integer.class, "readingPages", false, "READING_PAGES");
        public final static Property ReadFinish = new Property(12, Boolean.class, "readFinish", false, "READ_FINISH");
        public final static Property IsLike = new Property(13, Boolean.class, "isLike", false, "IS_LIKE");
        public final static Property IsHave = new Property(14, Boolean.class, "isHave", false, "IS_HAVE");
        public final static Property WhereFrom = new Property(15, String.class, "whereFrom", false, "WHERE_FROM");
    };


    public MyBookDao(DaoConfig config) {
        super(config);
    }
    
    public MyBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DOUBAN_ID\" TEXT," + // 1: doubanId
                "\"ISBN13\" TEXT," + // 2: isbn13
                "\"IMG_LOCAL\" TEXT," + // 3: img_local
                "\"COLLECT_DATE\" INTEGER," + // 4: collectDate
                "\"MODIFY_DATE\" INTEGER," + // 5: modifyDate
                "\"TITLE\" TEXT," + // 6: title
                "\"MY_COMMENT\" TEXT," + // 7: myComment
                "\"MY_TAG\" TEXT," + // 8: myTag
                "\"MY_RATING\" TEXT," + // 9: myRating
                "\"PAGES\" INTEGER," + // 10: pages
                "\"READING_PAGES\" INTEGER," + // 11: readingPages
                "\"READ_FINISH\" INTEGER," + // 12: readFinish
                "\"IS_LIKE\" INTEGER," + // 13: isLike
                "\"IS_HAVE\" INTEGER," + // 14: isHave
                "\"WHERE_FROM\" TEXT);"); // 15: whereFrom
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String doubanId = entity.getDoubanId();
        if (doubanId != null) {
            stmt.bindString(2, doubanId);
        }
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(3, isbn13);
        }
 
        String img_local = entity.getImg_local();
        if (img_local != null) {
            stmt.bindString(4, img_local);
        }
 
        java.util.Date collectDate = entity.getCollectDate();
        if (collectDate != null) {
            stmt.bindLong(5, collectDate.getTime());
        }
 
        java.util.Date modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindLong(6, modifyDate.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String myComment = entity.getMyComment();
        if (myComment != null) {
            stmt.bindString(8, myComment);
        }
 
        String myTag = entity.getMyTag();
        if (myTag != null) {
            stmt.bindString(9, myTag);
        }
 
        String myRating = entity.getMyRating();
        if (myRating != null) {
            stmt.bindString(10, myRating);
        }
 
        Integer pages = entity.getPages();
        if (pages != null) {
            stmt.bindLong(11, pages);
        }
 
        Integer readingPages = entity.getReadingPages();
        if (readingPages != null) {
            stmt.bindLong(12, readingPages);
        }
 
        Boolean readFinish = entity.getReadFinish();
        if (readFinish != null) {
            stmt.bindLong(13, readFinish ? 1L: 0L);
        }
 
        Boolean isLike = entity.getIsLike();
        if (isLike != null) {
            stmt.bindLong(14, isLike ? 1L: 0L);
        }
 
        Boolean isHave = entity.getIsHave();
        if (isHave != null) {
            stmt.bindLong(15, isHave ? 1L: 0L);
        }
 
        String whereFrom = entity.getWhereFrom();
        if (whereFrom != null) {
            stmt.bindString(16, whereFrom);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyBook readEntity(Cursor cursor, int offset) {
        MyBook entity = new MyBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // doubanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isbn13
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img_local
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // collectDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // modifyDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // myComment
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // myTag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // myRating
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // pages
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // readingPages
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // readFinish
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isLike
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isHave
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // whereFrom
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDoubanId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsbn13(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg_local(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCollectDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setModifyDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMyComment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMyTag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMyRating(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPages(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setReadingPages(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setReadFinish(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsLike(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setIsHave(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setWhereFrom(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
